)
if (is.null(df) || ncol(df) < 2) return(NULL)
names(df)[1:2] <- c("date", tolower(var))
if (!inherits(df$date, "Date")) df$date <- as.Date(df$date)
if (do_lag) {
x <- df[[2]]
df[[2]] <- c(NA, x[-1] / head(x, -1) - 1)
}
if (!is.na(col_name) && nzchar(col_name))
names(df)[2] <- col_name
df
}
dfs <- purrr::pmap(
list(var = variables,
col_name = rename_vars,
do_lag   = lagged),
get_one
) |>
purrr::compact()
if (length(dfs) == 0)
stop("No data downloaded successfully.")
joiner <- if (keep_all)
function(x, y) dplyr::full_join(x, y, by = "date")
else
function(x, y) dplyr::inner_join(x, y, by = "date")
purrr::reduce(dfs, joiner) |>
dplyr::as_tibble()
}
getFRED("UNRATE", "PAYEMS")
getFRED("UnRATE", tester = "PAYEMS")
getFRED(c("UnRATE", "PAYEMS"))
getFRED(c("UnRATE", tester = "PAYEMS"))
getFRED(c("UnRATE", tester = "PAYEMS"), rename_variables = c("unrate", "tester"))
#' Download and Merge FRED Data Series (natural “...” interface)
#'
#' @param ...  FRED series IDs.
#'   • **Named arguments** – `payroll = "PAYEMS"` – make the left‑hand name the
#'     resulting column name.
#'   • **Unnamed arguments** – `"UNRATE"` – keep the lowercase ticker
#'     (`unrate`) as the column name.
#'   • For backward compatibility you may pass a single (named) character vector,
#'     e.g. `c(unrate = "UNRATE", payroll = "PAYEMS")`.
#' @param keep_all Should the merge be a full join (`TRUE`, default) or an
#'   inner join (`FALSE`)?
#' @param lagged  Logical vector (or single logical) saying which series should
#'   be transformed into 1‑period returns.  See examples.
#'
#' @return A tibble with a `date` column and one column per series.
#' @examples
#' \dontrun{
#'   ## Same names as tickers
#'   getFRED("UNRATE", "PAYEMS")
#'
#'   ## Friendly column names via “...”
#'   getFRED(unrate = "UNRATE",
#'           payroll_employ = "PAYEMS",
#'           lagged = c(FALSE, TRUE))
#'
#'   ## Back‑compat: a named character vector still works
#'   getFRED(c(unrate = "UNRATE", payroll = "PAYEMS"))
#' }
#' @importFrom readr read_csv cols
#' @importFrom dplyr full_join inner_join as_tibble
#' @importFrom purrr pmap reduce compact
#' @export
getFRED <- function(...,
keep_all = TRUE,
rename_variables = NULL,
lagged = NULL) {
## ---------------------------------------------------------------
## 1.  Parse the dots --------------------------------------------
## ---------------------------------------------------------------
dots <- list(...)
if (length(dots) == 0)
stop("Provide at least one FRED series ID via the `...` arguments.")
flat <- unlist(dots, use.names = TRUE)      # keeps slot names
variables_raw <- unname(flat)               # the series IDs
n <- length(variables_raw)
names_in_dots <- names(flat)                # could be "" or NULL
if (is.null(names_in_dots) || length(names_in_dots) == 0)
names_in_dots <- rep(NA_character_, n)
names_in_dots[names_in_dots == ""] <- NA_character_
## ---------------------------------------------------------------
## 2.  Resolve column names --------------------------------------
## ---------------------------------------------------------------
if (!is.null(rename_variables)) {
if (length(rename_variables) != n)
stop("`rename_variables` must have the same length as the series list.")
# Detect conflicting sources of names
if (any(!is.na(names_in_dots)))
stop(
"You supplied names via both the `...` arguments *and* ",
"`rename_variables=`.  Please choose only one way to name columns."
)
rename_vars <- rename_variables
} else {
rename_vars <- names_in_dots
}
## ---------------------------------------------------------------
## 3.  Validate / recycle `lagged` -------------------------------
## ---------------------------------------------------------------
if (is.null(lagged)) {
lagged <- rep(FALSE, n)
} else if (length(lagged) == 1 && n > 1) {
lagged <- rep(lagged, n)
} else if (length(lagged) != n) {
stop("`lagged` must be length 1 or the same length as the series list.")
}
variables <- toupper(variables_raw)
## ---------------------------------------------------------------
## 4.  Helper: fetch one series ----------------------------------
## ---------------------------------------------------------------
get_one <- function(var, col_name, do_lag) {
url <- sprintf(
"https://fred.stlouisfed.org/series/%s/downloaddata/%s.csv",
var, var
)
message("Downloading ", var)
df <- tryCatch(
readr::read_csv(url, col_types = readr::cols()),
error = function(e) {
warning("Error downloading ", var, ": ", e$message)
return(NULL)
}
)
if (is.null(df) || ncol(df) < 2) return(NULL)
names(df)[1:2] <- c("date", tolower(var))
if (!inherits(df$date, "Date")) df$date <- as.Date(df$date)
if (do_lag) {
x <- df[[2]]
df[[2]] <- c(NA, x[-1] / head(x, -1) - 1)
}
if (!is.na(col_name) && nzchar(col_name))
names(df)[2] <- col_name
df
}
## ---------------------------------------------------------------
## 5.  Download & merge ------------------------------------------
## ---------------------------------------------------------------
dfs <- purrr::pmap(
list(var = variables,
col_name = rename_vars,
do_lag   = lagged),
get_one
) |>
purrr::compact()
if (length(dfs) == 0)
stop("No data downloaded successfully.")
joiner <- if (keep_all)
function(x, y) dplyr::full_join(x, y, by = "date")
else
function(x, y) dplyr::inner_join(x, y, by = "date")
purrr::reduce(dfs, joiner) |>
dplyr::as_tibble()
}
getFRED(c("UnRATE", tester = "PAYEMS"), rename_variables = c("unrate", "tester"))
getFRED(c("UnRATE", "PAYEMS"), rename_variables = c("tester2", "tester"))
getFRED(c("UnRATE", payroll = "PAYEMS"))
getFRED("UnRATE", payroll = "PAYEMS")
devtools::document()
rm(list = c("getFRED"))
devtools::document()
library(govMacroTools)
?theme_esp
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point(size = 3) +
scale_color_esp() +
theme_esp(background = "beige")
mpg
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = cyl)) +
geom_point(size = 3) +
scale_color_esp() +
theme_esp(background = "beige")
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = cyl)) +
geom_point(size = 3) +
theme_esp(background = "beige")
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = cyl)) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_fill_esp()
scale_fill_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp() + scale_color_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp() + scale_fill_esp()
mpg
mpg$cycl
mpg$cyl
ggplot(mpg, aes(disp, hwy, color=cyl)) + geom_point()
ggplot(mpg, aes(displ, hwy, color=cyl)) + geom_point()
ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point()
ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point() + theme_esp()
ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point() + theme_esp(background = "beige")
ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point() + theme_esp(background = "beige") + scale_color_esp()
ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point() + theme_esp(background = "beige") + scale_fill_esp()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_color_esp()          # ← use the colour version
devtools::document()
devtools::load_all()
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile() +
scale_fill_esp_c() +
theme_esp()
library(tidyverse)
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile() +
scale_fill_esp_c() +
theme_esp()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
esp_update_geom_defaults
theme_esp
scale_fill_esp_c
esp_colours
.esp_colours
mpg
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp()
esp_update_geom_defaults()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp() + esp_update_geom_defaults()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
devtools::document()
devtools::load_all()   # or detach/attach the package
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
scale_colour_esp
devtools::load_all()
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
library(tidyverse)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
f <- scale_colour_esp
environmentName(environment(f))
# Put this in a fresh R session, with **no** package loaded yet -------------
library(ggplot2)
esp_test_cols <- c(
"#2c3254",   # Warm Navy
"#ff8361",   # Warm Red
"#70ad8f",   # Soft Green
"#472b51"    # Deep Purple
)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
scale_colour_manual(values = esp_test_cols) +
theme_minimal()
devtools::document()   # rebuild .Rd & NAMESPACE
devtools::install()    # or load_all() if you only need it in this session
library(govMacroTools)   # or your package’s name
find(scale_colour_esp)             # "package:govMacroTools"
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +                   # now the discrete scale
labs(title = "Fuel economy by cylinder count")
library(govMacroTools)   # or your package’s name
find(scale_colour_esp)             # "package:govMacroTools"
devtools::document()
devtools::install()
library(govMacroTools)
theme_espdevtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
library(ggplot2)
library(yourpkg)       # replace with your package name
library(ggplot2)
library(govMacroTools)       # replace with your package name
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
scale_colour_esp() +
theme_esp(background = "beige") +
labs(title = "Fuel economy by cylinder count")
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line() + scale_color_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line() + scale_fill_esp()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color="red")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
background  = c("white", "beige")
match.arg(background)
background  = c("white", "beige")
match.arg(background)
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = "beige") + geom_line(color=esp_navy())
theme_esp
background  = c("beige", "white")
match.arg(background)
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Babgkgnner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::install()
devtools::document()
devtools::load_all()
df <- getFRED("unrate", quits = "JTSQUR")
df
library(tidyverse)
df <- getFRED("unrate", quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_classic()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_fill_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information"
caption = "Mike Konczal")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
df <- getFRED(Unemployment = "unrate", Quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df <- getFRED(Unemployment = "unrate", Quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp(base_size=18) +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp(base_size = 18) +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line(size=1.2) +
theme_esp(base_size = 18) +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
